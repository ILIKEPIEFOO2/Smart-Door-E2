@name Pie's Efficient Smart Door System
@persist [Doors,WhiteListed]:array [WhiteListLookUp,DoorsLookUp]:table [CheckDelay] [SearchSize]:vector
if(first()){
    CheckDelay=250
    SearchSize=vec(100,100,100)
    
    
    WhiteListed = array(
        owner()
    )
    Doors = array(
        
    )
    DoorsLookUp=invert(Doors)
    WhiteListLookUp=invert(WhiteListed)
    runOnChat(1)
}
if(clkName():find("|||")){
    Data=clkName():explode("|||")
    switch(Data[1,string]){
        case "Open",
            Door = Doors[Data[2,string]:toNumber(),entity]
            Door["IsOpen",number] = 1
        break
        case "Close",
            Door = Doors[Data[2,string]:toNumber(),entity]
            Door["IsOpen",number] = 0
        break
    }
}
if(first()){
    rangerPersist(1)
    rangerIgnoreWorld(1)
    function void onWhitelistedEntry(Door:entity, Player:entity, Index:number){
        print("Whitelisted player "+Player:name()+" is next to ",Door)
        if(!Door["IsOpen",number]){
            timer("Open"+"|||"+Index,0)
        }else{
            
        }
    }
    function void onNonWhitelistedEntry(Door:entity, Player:entity, Index:number){
        print("Non-Whitelisted player "+Player:name()+" is next to ",Door)
    }
    function void onOpen(Door:entity){
        
    }
    function void onClose(Door:entity){
        
    }
    
    
    
    function number entity:whitelist(){
        if(This:isPlayer()){
            if(WhiteListLookUp:exists(This:toString())){
                print("This player is already whitelisted")
                return 0
            }else{
                WhiteListed:pushEntity(This)
                WhiteListLookUp=invert(WhiteListed)
                return 1
            }
        }else{
            print("Invalid Entity, Entity is not a player")
            return 0
        }
    }
    function number whitelist(Player:entity){
        if(Player:isPlayer()){
            if(WhiteListLookUp:exists(Player:toString())){
                print("This player is already whitelisted")
                return 0
            }else{
                WhiteListed:pushEntity(Player)
                WhiteListLookUp=invert(WhiteListed)
                return 1
            }
        }else{
            print("Invalid Entity, Entity is not a player")
            return 0
        }
    }
    function number removeWhitelist(Player:entity){
        if(Player:isPlayer()){
            if(WhiteListLookUp:exists(Player:toString())){
                WhiteListed:remove(WhiteListLookUp[Player:toString(),number])
                return 1
            }else{
                print("This player was not whitelisted")
                return 0
            }
        }else{
            print("Invalid Entity, Entity is not a player")
            return 0
        }
    }
    function number entity:removeWhitelist(){
        if(This:isPlayer()){
            if(WhiteListLookUp:exists(This:toString())){
                WhiteListed:remove(WhiteListLookUp[This:toString(),number])
                return 1
            }else{
                print("This player was not whitelisted")
                return 0
            }
        }else{
            print("Invalid Entity, Entity is not a player")
            return 0
        }
    }
    function number entity:isWhitelisted(){
        if(This:isPlayer()){
            if(WhiteListLookUp:exists(This:toString())){
                return 1
            }else{
                return 0
            }
        }else{
            print("Invalid Entity, Entity is not a player")
            return 0
        }
    }
    function number isWhitelisted(Player:entity){
        if(Player:isPlayer()){
            if(WhiteListLookUp:exists(Player:toString())){
                return 1
            }else{
                return 0
            }
        }else{
            print("Invalid Entity, Entity is not a player")
            return 0
        }
    }
    function number addDoor(Door:entity){
        if(Door:isPhysics()){
            if(DoorsLookUp:exists(Door:toString())){
                print("This door was already added")
                return 0
            }else{
                Doors:pushEntity(Door)
                DoorsLookUp=invert(Doors)
                if(!timerRunning("Check")){
                    timer("Check",CheckDelay)
                }
                return 1
            }
        }else{
            print("Invalid Entity, Entity does not have any physical properties")
            return 0
        }
    }
    function number entity:addDoor(){
        if(This:isPhysics()){
            if(DoorsLookUp:exists(This:toString())){
                print("This door was already added")
                return 0
            }else{
                Doors:pushEntity(This)
                DoorsLookUp=invert(Doors)
                if(!timerRunning("Check")){
                    timer("Check",CheckDelay)
                }
                return 1
            }
        }else{
            print("Invalid Entity, Entity does not have any physical properties")
            return 0
        }
    }
    function number removeDoor(Door:entity){
        if(Door:isPhysics()){
            if(DoorsLookUp:exists(Door:toString())){
                Doors:remove(DoorsLookUp[Door:toString(),number])
                return 1
            }else{
                print("This door was already removed")
                return 0
            }
        }else{
            print("Invalid Entity, Entity does not have any physical properties")
            return 0
        }
    }
    function number entity:removeDoor(){
        if(This:isPhysics()){
            if(DoorsLookUp:exists(This:toString())){
                Doors:remove(DoorsLookUp[This:toString(),number])
                return 1
            }else{
                print("This door was already removed")
                return 0
            }
        }else{
            print("Invalid Entity, Entity does not have any physical properties")
            return 0
        }
    }
    function entity findNearbyEntity(Door:entity,Size:vector){
        if(Door){
            RangerData=rangerOffsetHull(150,Door:pos()-vec(0,0,50),vec(0,0,1),Size)
            if(RangerData:hit()){
                Entity=RangerData:entity()
                if(Entity:isPlayer()){
                    return Entity
                }else{
                    rangerFilter(Entity)
                    return findNearbyEntity(Door,Size)
                }
            }else{
                return noentity()
            }
        }else{
            return noentity()
        }
    }
    
    function entity searchForPlayer(Person:string){
        local P=findPlayerBySteamID64(Person)
        if (!(P:isPlayer())){
            P=findPlayerBySteamID(Person)
            if (!(P:isPlayer())){
                P=findPlayerByName(Person)
                if (!(P:isPlayer())){            
                    print("Invalid Player")
                }
            }
        }
        return P
    }
    
    
}


if(chatClk(owner())){
    LS=lastSaid():explode(" ")
    switch(LS[1,string]:lower()){
        case ".adddoor",
            P=lastSpoke():aimEntity()
            if(P:addDoor()){
                print("Door has successfully been added")
            }
        break
        case ".removedoor",
            P=lastSpoke():aimEntity()
            P:removeDoor()
        break
        case ".add",
            if(LS[2,string]!=""){
                P=searchForPlayer(LS[2,string])
            }else{
                P=lastSpoke():aimEntity()
            }
            if(P:whitelist()){
                print(P:name()+" has been successfully whitelisted")    
            }
        break
        case ".remove",
            if(LS[2,string]!=""){
                P=searchForPlayer(LS[2,string])
            }else{
                P=lastSpoke():aimEntity()
            }
            if(P:removeWhitelist()){
                print(P:name()+" has been successfully whitelisted")    
            }
        break
    }
}

if(clk("Check")){
    if(Doors:count()>0){
        foreach(Index, Door:entity = Doors){
            Player = findNearbyEntity(Door,SearchSize)
            if(Player){
                if(Player:isWhitelisted()){
                    onWhitelistedEntry(Door,Player,Index)
                }else{
                    onNonWhitelistedEntry(Door,Player,Index)
                }
            }else{
                if(!Door){
                    Doors:remove(Index)
                }
            }
        }
        timer("Check",CheckDelay)
    }
}

